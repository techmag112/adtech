{"version":3,"file":"script.js","mappings":";;;;;;;;;;;;;;;AAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM,yDAAY;AAClB;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;ACjBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;ACrKvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE,IAAI,EAAE;AAChD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY,UAAU,YAAY;AAC9E,0CAA0C,cAAc;AACxD,0CAA0C,eAAe;AACzD,0CAA0C,aAAa;AACvD,0CAA0C,kBAAkB;AAC5D,0CAA0C,eAAe;AACzD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,SAAS;AACT,kBAAkB;AAClB,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY;;;;;;UCnO3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AACA;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6DAAQ;AACV;AACA,EAAE,6DAAQ;AACV;AACA,CAAC;AACD","sources":["webpack://chat/./src/modules/getState.js","webpack://chat/./src/modules/makeGraf.js","webpack://chat/./src/modules/renderOffers.js","webpack://chat/webpack/bootstrap","webpack://chat/webpack/runtime/define property getters","webpack://chat/webpack/runtime/hasOwnProperty shorthand","webpack://chat/webpack/runtime/make namespace object","webpack://chat/./src/main.js"],"sourcesContent":["import renderOffers from \"./renderOffers\";\r\n\r\nasync function getState(state) {\r\n\r\n    await axios.get('/get/getOfferList').then(res => {\r\n         state.offerList = res.data;\r\n         console.log('state.offerList', state.offerList);\r\n        })\r\n        .catch(function(error) {\r\n         console.log(\"Ошибка базы данных \" + error);\r\n      });\r\n      \r\n      console.log('Загрузка данных выполнена!');\r\n      renderOffers(state);\r\n\r\n};\r\n\r\nexport default getState;","const makeGraf = (state, name1, name2) => {\r\n\r\n  const ctx = document.getElementById('myChart');\r\n  const btnYear = document.getElementById(\"graf1\");\r\n  const btnMonth = document.getElementById(\"graf2\");\r\n  const btnDay = document.getElementById(\"graf3\");\r\n  const summaryGraf = document.querySelector(\".grafTag\");\r\n  let chartStatus;\r\n\r\n  changeGraf();\r\n  getYearGrafFromDB();\r\n\r\n    function changeGraf() {\r\n        btnYear.addEventListener( \"click\", getYearGrafFromDB);    \r\n        btnMonth.addEventListener( \"click\", getMonthGrafFromDB);    \r\n        btnDay.addEventListener( \"click\", getDayGrafFromDB);    \r\n    }\r\n\r\n    function updateTextSummary() {\r\n        summaryGraf.textContent = 'Итого за период: переходы - '+ state.sum + ', потрачено - ' + state.total + ' руб';\r\n    }\r\n\r\n    function getYearGrafFromDB() {\r\n        state.sum = 0;\r\n        state.total = 0;\r\n        axios.get('/get/getYearGrafOffers').then(res => {\r\n                state.yearData1 = res.data.map(item => {\r\n                    state.total += Number(item['total']);    \r\n                    return item['total'] === null ? 0 : item['total'];\r\n                });\r\n\t            state.yearData2 = res.data.map(item => {\r\n                    state.sum += Number(item['sum']);\r\n                    return item['sum'] === null ? 0 : item['sum'];\r\n                });\r\n                console.log('state.yearData1', state.yearData1);\r\n                console.log('state.yearData2', state.yearData2);\r\n            }) .then(() => {\r\n                console.log('Загрузка графика выполнена!');\r\n                updateTextSummary();\r\n                yearGraf();\r\n            })\r\n            .catch(function(error) {\r\n            console.log(\"Ошибка базы данных \" + error);\r\n        });\r\n    } \r\n\r\n    function getMonthGrafFromDB() {\r\n        state.sum = 0;\r\n        state.total = 0;\r\n        axios.get('/get/getMonthGrafOffers').then(res => {\r\n                state.monthData1 = res.data.map(item => {\r\n                    state.total += Number(item['total']);    \r\n                    return item['total'] === null ? 0 : item['total'];\r\n                });\r\n                state.monthData2 = res.data.map(item => {\r\n                    state.sum += Number(item['sum']);\r\n                    return item['sum'] === null ? 0 : item['sum'];\r\n                });\r\n                console.log('state.monthData1', state.monthData1);\r\n                console.log('state.monthData2', state.monthData2);\r\n            }) .then(() => {\r\n                console.log('Загрузка графика выполнена!');\r\n                updateTextSummary();\r\n                monthGraf();\r\n            })\r\n            .catch(function(error) {\r\n            console.log(\"Ошибка базы данных \" + error);\r\n        });\r\n    } \r\n\r\n    function getDayGrafFromDB() {\r\n        state.sum = 0;\r\n        state.total = 0;\r\n        axios.get('/get/getDayGrafOffers').then(res => {\r\n                state.dayData1 = res.data.map(item => {\r\n                    state.total += Number(item['total']);    \r\n                    return item['total'] === null ? 0 : item['total'];\r\n                });\r\n                state.dayData2 = res.data.map(item => {\r\n                    state.sum += Number(item['sum']);\r\n                    return item['sum'] === null ? 0 : item['sum'];\r\n                });\r\n                console.log('state.dayData1', state.dayData1);\r\n                console.log('state.dayData2', state.dayData2);\r\n            }) .then(() => {\r\n                console.log('Загрузка графика выполнена!');\r\n                updateTextSummary();\r\n                dayGraf();\r\n            })\r\n            .catch(function(error) {\r\n            console.log(\"Ошибка базы данных \" + error);\r\n        });\r\n    } \r\n\r\n    function getDayGrafFromDB() {\r\n        state.sum = 0;\r\n        state.total = 0;\r\n        axios.get('/get/getYearGrafOffers').then(res => {\r\n                state.dayData1 = res.data.map(item => {\r\n                    state.total += Number(item['total']);    \r\n                    return item['total'];\r\n                });\r\n                state.dayData2 = res.data.map(item => {\r\n                    state.sum += Number(item['sum']);\r\n                    return item['sum'];\r\n                });\r\n                console.log('state.dayData1', state.dayData1);\r\n                console.log('state.dayData2', state.dayData2);\r\n            }) .then(() => {\r\n                console.log('Загрузка графика выполнена!');\r\n                updateTextSummary();\r\n                yearGraf();\r\n            })\r\n            .catch(function(error) {\r\n            console.log(\"Ошибка базы данных \" + error);\r\n        });\r\n    } \r\n\r\n    function yearGraf() {\r\n        initGraf(state.yearLabels, name1, name2, state.yearData1, state.yearData2);\r\n    }\r\n\r\n    function monthGraf() {\r\n        initGraf(state.monthLabels, name1, name2, state.monthData1, state.monthData2);\r\n    }\r\n\r\n    function dayGraf() {\r\n        initGraf(state.dayLabels, name1, name2, state.dayData1, state.dayData2);\r\n    }\r\n\r\n    function initGraf(labels, name1, name2, data1, data2) {\r\n        if (chartStatus != undefined) {\r\n            chartStatus.destroy();\r\n          }\r\n        chartStatus = new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: name1,\r\n                data: data1,\r\n                borderWidth: 1,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n            }, {\r\n                label: name2,\r\n                data: data2,\r\n                borderWidth: 1,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                borderColor: 'rgba(54, 162, 235, 1)',\r\n            }],\r\n            options: {\r\n            scales: {\r\n                y: {\r\n                    beginAtZero: true\r\n                }\r\n                }\r\n            }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default makeGraf;","const renderOffers = (state) => {\r\n\r\n    const divTable =  document.getElementById('offers');\r\n    const filterAll =  document.getElementById('offer_all');\r\n    const filterSelect =  document.getElementById('offer_select');\r\n    let filterSelectOn = false;\r\n    const mainContainer = document.querySelector(\".container\"); \r\n    const windowAddOffer = document.querySelector(\".layerAddOffer\");\r\n    const btnAdd = document.querySelector(\"#new\");\r\n    const btnReset = document.querySelector(\"#reset\");\r\n    const btnAddOffer = document.querySelector(\"#addoffer\");\r\n    let shadowOverlay;\r\n\r\n    setHandler();\r\n    offerTableListener();\r\n    renderTableOffers();\r\n    \r\n\r\n    function setHandler() {\r\n        // Debug test listener\r\n        //document.addEventListener( \"click\", function(e) {\r\n        //    console.log(e.target);\r\n        //});     \r\n        filterAll.addEventListener( \"click\", function(e) {\r\n            if (filterSelectOn) {\r\n                filterSelectOn = false;\r\n                renderTableOffers();  \r\n            }\r\n        });     \r\n        filterSelect.addEventListener( \"click\", function(e) {\r\n            if (!filterSelectOn) { \r\n                filterSelectOn = true;\r\n                renderTableOffers(state.offerList.filter(arr => arr['status'] == 1));  \r\n            }\r\n        });    \r\n        btnAdd.addEventListener( \"click\", initOverlay);    \r\n        btnReset.addEventListener( \"click\", closeOverlay);    \r\n        btnAddOffer.addEventListener( \"click\",  function(e) {\r\n            e.preventDefault();\r\n            addOffer();    \r\n        });    \r\n\r\n    }\r\n\r\n    function addOffer() {\r\n        // verify and transform\r\n        const inputNameOffer = document.querySelector('#nameOffer');\r\n        const inputSumOffer = document.querySelector('#sumOffer');\r\n        const inputUrlOffer = document.querySelector('#urlOffer');\r\n        const inputKeyOffer = document.querySelector('#keyOffer');\r\n        let str;\r\n        str = inputNameOffer.value;\r\n        inputNameOffer.value = str.slice(0,1).toUpperCase() + str.slice(1)\r\n        str = inputUrlOffer.value;\r\n        str = str.replace('https://', ''); \r\n        str = str.replace('http://', ''); \r\n        inputUrlOffer.value = str;\r\n        str = inputKeyOffer.value;\r\n        str = str.toLowerCase();\r\n        str = str.replaceAll(\"(?U)[^\\\\p{L}\\\\p{N}\\\\s]+\", \"\");\r\n        inputKeyOffer.value = str;\r\n        if (inputNameOffer.value !='' && inputSumOffer.value != '' && inputUrlOffer.value != '' && inputKeyOffer.value != '') {\r\n            setOfferInDB(inputNameOffer.value, inputSumOffer.value, inputUrlOffer.value, inputKeyOffer.value);\r\n        } else {\r\n            console.log('Форма оффера не заполнена!')\r\n        }\r\n    }\r\n\r\n    function setOfferInDB(nameOffer, sumOffer, urlOffer, keyOffer) {\r\n        axios({\r\n            method: 'post',\r\n            url: '/post/putOfferInDB',\r\n            headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\"\r\n        },\r\n            data:  {\r\n                \"name\": nameOffer,\r\n                \"price\": sumOffer,\r\n                \"url\": urlOffer,\r\n                \"keywords\": keyOffer\r\n                }\r\n            })\r\n            .then(() => {\r\n                 getOffersFromDB();\r\n                 console.log('Таблица офферов обновлена.');\r\n            })    \r\n            .then(() => {\r\n                console.log('Оффер успешно обновлен.');\r\n                closeOverlay();\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function getOffersFromDB() {\r\n        axios.get('/get/getOfferList').then(res => {\r\n                state.offerList = res.data;\r\n                console.log('state.offerList', state.offerList);\r\n            }) .then(() => {\r\n                console.log('Загрузка данных выполнена!');\r\n                renderOffers(state);\r\n            })\r\n            .catch(function(error) {\r\n            console.log(\"Ошибка базы данных \" + error);\r\n        });\r\n    }   \r\n\r\n    function renderTableOffers(arr=state.offerList) {\r\n        divTable.innerHTML = '';\r\n        if (arr.length != 0) {\r\n            arr.forEach(offer => {\r\n                let classTable = offer['status'] ? 'table-success' : 'table-danger';\r\n                divTable.innerHTML += `\r\n                                <tr class=${classTable} data-id=${offer['id']}>\r\n                                    <td>${offer['name']}</td>\r\n                                    <td>${offer['price']}</td>\r\n                                    <td>${offer['url']}</td>\r\n                                    <td>${offer['keywords']}</td>\r\n                                    <td>${offer['count']}</td>\r\n                                </tr>`;\r\n                        });\r\n        }\r\n    }\r\n\r\n    function setStatusOffer(id, status) {\r\n        state.offerList.forEach(arr => {\r\n            if (arr.id == id) {\r\n                arr.status = status;\r\n            }\r\n        });\r\n        setStatusOfferInDB(id, status);\r\n        if ((filterSelectOn) && (!status)) { \r\n            renderOffers(state.offerList.filter(arr => arr['status'] == 1));  \r\n        }\r\n    }\r\n\r\n    function setStatusOfferInDB(id, status) {\r\n        axios({\r\n          method: 'post',\r\n          url: '/post/setStatusOfferInDB',\r\n          headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\"\r\n        },\r\n          data:  {\"id\": id, \"status\": status}\r\n          })\r\n          .then(() => {\r\n              console.log('Статус оффера успешно обновлен.');\r\n          })\r\n          .catch(function(error) {\r\n              console.log(error);\r\n          });\r\n    }\r\n    \r\n    function toggleClassTable(id, confirmText) {\r\n        const selector = \"[data-id=\" + '\"' + id + '\"]'; \r\n        const elemTable = document.querySelector(selector);\r\n        if (elemTable.classList.contains('table-success')) {\r\n            if (confirm(confirmText)) {\r\n                setStatusOffer(id, 0);\r\n                elemTable.classList.toggle('table-success');\r\n                elemTable.classList.toggle('table-danger');\r\n            }\r\n        } else {\r\n            setStatusOffer(id, 1);\r\n            elemTable.classList.toggle('table-success');\r\n            elemTable.classList.toggle('table-danger');\r\n        }\r\n    }\r\n\r\n    function offerTableListener() {\r\n        divTable.addEventListener( \"click\", function(e) {\r\n          toggleClassTable(getIdOnClick(e), \"Вы действительно хотите деактивировать оффер?\");\r\n        });     \r\n    }\r\n  \r\n    function getIdOnClick(e) { \r\n        let node = e.target;\r\n        let id;\r\n        do {\r\n            hasAttr(node, \"data-id\") ? id = node.getAttribute(\"data-id\") : node = node.parentNode;\r\n        } while (!id);\r\n        return id;\r\n    }\r\n    \r\n    function hasAttr(element, attr) {\r\n        if(typeof element === 'object' && element !== null && 'getAttribute' in element  && element.hasAttribute(attr)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n    }\r\n\r\n    function listener1(e) {\r\n        if (e.target.classList.contains('overlay__shadow')) {\r\n            closeOverlay();\r\n        }\r\n      }\r\n\r\n    function listener2(e) {\r\n        if (e.key === 'Escape') {\r\n            closeOverlay();\r\n        }\r\n      }\r\n     \r\n    function initOverlay() { \r\n            shadowOverlay = document.createElement('div');\r\n            shadowOverlay.classList.add('overlay__shadow');\r\n            shadowOverlay.classList.add('overlay__shadow--show');\r\n            shadowOverlay.addEventListener('click', listener1);\r\n            window.addEventListener('keydown', listener2);\r\n            mainContainer.appendChild(shadowOverlay);\r\n            windowAddOffer.classList.add('active');\r\n      }\r\n      \r\n      function closeOverlay() {\r\n            shadowOverlay.removeEventListener('click', listener1, false);\r\n            window.removeEventListener('keydown', listener2, false);\r\n            shadowOverlay.classList.remove('overlay__shadow--show');\r\n            shadowOverlay.classList.remove('overlay__shadow');\r\n            mainContainer.removeChild(shadowOverlay);\r\n            windowAddOffer.classList.remove('active');\r\n      }\r\n    \r\n\r\n};\r\n\r\nexport default renderOffers;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import getState from \"./modules/getState\";\r\nimport makeGraf from \"./modules/makeGraf\";\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n   let state = {\r\n    offerList: [],\r\n    yearLabels: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\r\n    monthLabels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'],\r\n    dayLabels: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']\r\n   }; \r\n\r\n  getState(state);\r\n  \r\n  makeGraf(state, 'Расходы, руб', 'Переходы, клик');\r\n   \r\n});\r\n\r\n"],"names":[],"sourceRoot":""}